/*! Personal Inventory Tracker Enhanced */
var PITOcr=(()=>{var l=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var s=(e=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(e,{get:(n,t)=>(typeof require!="undefined"?require:n)[t]}):e)(function(e){if(typeof require!="undefined")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});var y=(e,n)=>{for(var t in n)i(e,t,{get:n[t],enumerable:!0})},c=(e,n,t,o)=>{if(n&&typeof n=="object"||typeof n=="function")for(let r of p(n))!g.call(e,r)&&r!==t&&i(e,r,{get:()=>n[r],enumerable:!(o=u(n,r))||o.enumerable});return e};var d=(e,n,t)=>(t=e!=null?l(m(e)):{},c(n||!e||!e.__esModule?i(t,"default",{value:e,enumerable:!0}):t,e)),x=e=>c(i({},"__esModule",{value:!0}),e);var b={};y(b,{bindOcrToInput:()=>h,extractItemSuggestions:()=>w,loadTesseract:()=>f});var a;function f(){return a||(a=(async()=>{try{return await import("https://cdn.jsdelivr.net/npm/tesseract.js@5/dist/tesseract.esm.min.js")}catch(e){console.warn("CDN load failed, attempting local Tesseract.");try{return await import("./tesseract.esm.min.js")}catch(n){throw new Error("OCR engine failed to load.")}}})()),a}async function w(e,n=60){if(typeof window=="undefined")return console.warn("OCR is only supported in browser environments."),[];try{let t=await f(),{data:o}=await t.recognize(e,"eng");return o.lines.filter(r=>r.confidence>=n).map(r=>({text:r.text.trim(),confidence:r.confidence}))}catch(t){return typeof window!="undefined"&&alert(t.message),console.warn(t.message),[]}}function h(e,n,t=60){if(typeof window=="undefined"){console.warn("OCR binding skipped: not in a browser");return}e.addEventListener("change",async()=>{let[o]=e.files;if(o){let r=await w(o,t);n(r)}})}return x(b);})();
