/*! Personal Inventory Tracker Enhanced */
var PITOcr=(()=>{var w=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var c=(e=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(e,{get:(n,t)=>(typeof require!="undefined"?require:n)[t]}):e)(function(e){if(typeof require!="undefined")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});var y=(e,n)=>{for(var t in n)i(e,t,{get:n[t],enumerable:!0})},s=(e,n,t,o)=>{if(n&&typeof n=="object"||typeof n=="function")for(let r of p(n))!m.call(e,r)&&r!==t&&i(e,r,{get:()=>n[r],enumerable:!(o=u(n,r))||o.enumerable});return e};var l=(e,n,t)=>(t=e!=null?w(g(e)):{},s(n||!e||!e.__esModule?i(t,"default",{value:e,enumerable:!0}):t,e)),h=e=>s(i({},"__esModule",{value:!0}),e);var b={};y(b,{bindOcrToInput:()=>x,extractItemSuggestions:()=>f,loadTesseract:()=>d});var a;function d(){return a||(a=(async()=>{try{return await import("https://cdn.jsdelivr.net/npm/tesseract.js@5/dist/tesseract.esm.min.js")}catch(e){console.warn("CDN load failed, attempting local fallback.");try{return await import("./tesseract.esm.min.js")}catch(n){throw console.error("Tesseract failed to load.",n),new Error("Failed to load OCR engine. Please check your internet connection or plugin installation.")}}})()),a}async function f(e,n=60){if(typeof window=="undefined")return console.warn("OCR is only supported in browser environments."),[];try{let t=await d(),{data:o}=await t.recognize(e,"eng");return o.lines.filter(r=>r.confidence>=n).map(r=>({text:r.text.trim(),confidence:r.confidence}))}catch(t){return console.warn(t.message),typeof window!="undefined"&&alert(t.message),[]}}function x(e,n,t=60){if(typeof window=="undefined"){console.warn("OCR binding skipped: not in a browser");return}e.addEventListener("change",async()=>{let[o]=e.files;if(o){let r=await f(o,t);n(r)}})}return h(b);})();
